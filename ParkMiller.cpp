#include "ParkMiller.h"const long a = 16807;const long m = 2147483647;const long q = 127773;const long r = 2836;ParkMiller::ParkMiller(int a){}RandomParkMiller::RandomParkMiller(unsigned long Dimensionality, unsigned long Seed)	: RandomBase(Dimensionality),	InnerGenerator(Seed),	InitialSeed(Seed){	Reciprocal = 1 / (1.0 + InnerGenerator.Max());}RandomBase* RandomParkMiller::clone() const{	return new RandomParkMiller(*this);}void RandomParkMiller::GetUniforms(MJArray& variates){	for (unsigned long j = 0; j < GetDimensionality(); j++)		variates.setValue(j, InnerGenerator.GetOneRandomInteger()*Reciprocal);}void RandomParkMiller::Skip(unsigned long numberOfPaths){	MJArray tmp(GetDimensionality());	for (unsigned long j = 0; j < numberOfPaths; j++)		GetUniforms(tmp);}void RandomParkMiller::SetSeed(unsigned long Seed){	InitialSeed = Seed;	InnerGenerator.SetSeed(Seed);}void RandomParkMiller::Reset(){	InnerGenerator.SetSeed(InitialSeed);}void RandomParkMiller::ResetDimensionality(unsigned long NewDimensionality){	RandomBase::ResetDimensionality(NewDimensionality);	InnerGenerator.SetSeed(InitialSeed);}